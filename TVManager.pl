#!/usr/bin/perl -w

##################
#
# This file was automatically generated by ZooZ.pl v1.2
# on Tue Aug 23 15:17:53 2011.
# Project: Project 2
# File:    /home/karthikt/Dropbox/Backup/Projects/My Coding Career/perl/TV Manager/ui.zooz
#
##################

#
# Headers
#
use strict;
use warnings;
use 5.10.1;
use Tk 804;
use Data::Dumper;
require Tk::HList;
require Tk::Tree;
use File::Basename;
use lib dirname(__FILE__);
use Tk::DialogBox;


require "utils.pl";
require "dataStore.pl";

our %show = (
		'pattern' => '',
		'name' => '',
		'path' => '',
		'lastPlayed' => '',
		'id' => '',
		'depth'=> '',
		'defaultmode'=> '',
		'category'=> ''
        );
        
require "MainUI.pl";
#
# Global variables
#
my (
     # MainWindow
     $MW,

     # Hash of all widgets
     %ZWIDGETS,
    );

($MW, %ZWIDGETS) = SetupUI();


$MW->gridColumnconfigure(0, -weight => 1);
#Load Show list
loadShowList();

srand();
###############
#
# MainLoop
#
###############

MainLoop;

#######################
#
# Subroutines
#
#######################


sub loadShowList{
	say "Loading Show List";
	my $widget = shift;
	$widget = $ZWIDGETS{'shwList'} unless $widget;
	my %list = getShowList();	
	
	my($id,$show);
	my %categories;	
	
	foreach $id (keys %list){
		unless ($list{$id}->{category}){
			$list{$id}->{category}="Misc";#default category
		} else {
			$categories{$list{$id}->{category}}++;#track other unique categories
		}
	}	
	$widget -> delete("all");
	$widget-> add($_, -text =>$_ ) foreach (sort keys %categories);
	#moving Misc to last
	$widget -> add("Misc", -text =>"Misc" );
	#Add all shows, sorted
	$widget -> add(catfile($list{$_}->{category},$_), -text => $list{$_}->{name})
				foreach (sort {$list{$a}->{name} cmp $list{$b}->{name}}keys %list);	

	$widget->autosetmode;
}

sub indicateNewEpisodes{
	my $widget = $ZWIDGETS{'shwList'};
	my %showList = getShowList();;
	say Dumper(%showList);
	$widget = $ZWIDGETS{'shwList'} unless $widget;
	foreach my $id (keys %showList){
		if($showList{$id}->{category} eq "Latest"){
			my %showDet = getShowDetails($id);#$showList{}->{name}
			my @epiList = loadRecursiveFiles($showDet{path},$showDet{pattern},$showDet{depth});
			unless($epiList[$#epiList] eq $showDet{lastPlayed}){		
				say	$epiList[$#epiList],$showDet{lastPlayed};
				$widget->indicator('create', catfile($showList{$id}->{category},$id), -itemtype => 'text', -text => '+');
			}else{
				$widget->indicator('delete', catfile($showList{$id}->{category},$id)) if($widget->indicator('exists', catfile($showList{$id}->{category},$id)));
			}
		}
	
	}

}

sub findchild {
	my ($mode,$child)=@_;#mode has to be next or prev. next without child returns first child
	if(!$child and $child = shift(@{$ZWIDGETS{'epiList'} ->info("children" )}) and !(scalar( $ZWIDGETS{'epiList'} -> info("children",$child)))){
		return $child;#does not exist and child exists and child does not have child. if has child it goes forward and continues with the loop
	}
	
	$mode = "next" if (!grep {/$mode/}("next" ,"prev"));
	
	do{
		$child =  $ZWIDGETS{'epiList'} -> info($mode,$child);
	}while ($child && (scalar( $ZWIDGETS{'epiList'} -> info("children",$child))));#while it has children/isnt a file or it doesnt exist (prev of first file)
	return $child;
}

sub playSelected {
	return unless $show{name};
	my $playNow;
	$playNow = findchild("next",findchild("prev",$ZWIDGETS{'epiList'} -> selectionGet()));
	
	play($show{path},$playNow);
	updateLastPlayed($playNow);


}


sub playRandom {	
	return unless $show{name};
	
	my @fileList = loadRecursiveFiles($show{path},$show{pattern},$show{depth});
	my $randVid = "" ;
	my $count =0;
	$randVid = $fileList[int(rand(scalar(@fileList)+1))] until(is_video($randVid)|| $count++>10);
	play($show{path},$randVid);
}

sub playNext {		
	return unless $show{name};

	my $playNow;
	$playNow = findchild("next",$show{lastPlayed});
	
	play($show{path},$playNow);
	updateLastPlayed($playNow);
	
}

sub updateLastPlayed{
	$show{lastPlayed}=shift;
	saveShow(%show);
	markLastViewed();
}

sub saveShowDetails {	
	return unless $show{name};
	
	saveShow(%show);
	loadEpisodes();
}
#TODO Store next rather than last?
sub startOrderHere {
	return unless $show{name};
	
	updateLastPlayed(findchild("prev",$ZWIDGETS{'epiList'} -> selectionGet()));
}

sub loadEpisodeList {
	my $show = shift;
	return unless ($show=~/\//);	
	loadShow(basename($show));
	loadEpisodes();
}

sub loadEpisodes{	
	my @list = loadRecursiveFiles($show{path},$show{pattern},$show{depth});
	$ZWIDGETS{'epiList'} -> delete("all");
	$ZWIDGETS{'epiList'} -> add($_, -text => fileName($_)) foreach @list;
	markLastViewed();
}

sub markLastViewed{
	if ($show{lastPlayed}){
		$ZWIDGETS{'epiList'} ->selectionClear();
		$ZWIDGETS{'epiList'} ->selectionSet($show{lastPlayed});
		$ZWIDGETS{'epiList'} ->see($show{lastPlayed});
	}
}
sub loadShow{
	my ($showname,$showlocal) = @_;
	$showlocal= \%show unless $showlocal;
	
	my %return = getShowDetails($showname);
	copyhash($showlocal,\%return);
}


sub editShows {
	#http://search.cpan.org/~srezic/Tk-804.029/pod/DialogBox.pod
	my $d = $MW->DialogBox(-title => "Edit the Show List", -buttons => ["Close"]);
	
	displayEditShowsDialog($d);
	$d->Show;
	loadShowList();
	#my $w = $d->add(Widget, args)->pack;
	#say $newDir;
	
	#temp
#	my $newDir = $MW->chooseDirectory();
#	my %newShow;
#	$newShow{name}= fileName($newDir);
#	$newShow{path}= $newDir;
#	addShow(%newShow);
#	loadShowList();
}
#using common func to save show
#sub setPath {	
#	return unless $show{name};
#	
#	saveShow(%show);
#	loadEpisodes();
#}
#TODO images
#TODO ui nicer


sub displayEditShowsDialog {
	my $d=shift;
	my %editshow;
	my $l;
	my $catb;
	
	my $editList = $d->add("Tree",
			   -separator => '/',
			   -browsecmd=>sub {
						my @catList = getCategoryList();
						if(@catList){
							$catb -> delete(0,"end");
							$catb -> insert("end", $_) foreach sort @catList;
						}
						my $id = shift;
						if($id=~/\//) {#show
							loadShow(basename($id),\%editshow);
							$l->configure(-text =>"Show Details (#$editshow{id})");
						}else{#category
							clearhash(\%editshow);
						}				
					})->grid(
			   -row    => 0,
			   -column => 0,
			   -sticky => 'nsew',
			  );
	loadShowList($editList);
	my $id;
	#if show selected in main list
	if ($ZWIDGETS{'shwList'}-> selectionGet() and $id =$ZWIDGETS{'shwList'}-> selectionGet()->[0]) {
		$editList->selectionSet($id); 	#select it in edit list
		$editList->see($id);  #make it visible
		$id =~ /\// &&				#if it isnt a category
		loadShow(basename($id),\%editshow)&&    #load it
		$l->configure(-text =>"Show Details (#$editshow{id})");
	}
		        	
		

 	$l=$d->add("Labelframe",
		-takefocus => 0,
		-text     => "Show Details",
		)->grid(
		-row    => 0,
		-column => 1,
		-sticky => 'nsew',
		);
		



	# Widget Label1 isa Label
	$l->Label(
	   -justify   => 'center',
	   -takefocus => 0,
	   -text      => 'Name',
	  )->grid(
	   -row    => 0,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget name isa Entry
	$l->Entry(
	   -exportselection => 1,
	   -textvariable    => \$editshow{name},
	  )->grid(
	   -row    => 0,
	   -column => 1,	   
	   -columnspan => 2,
	   -sticky => 'ew',
	  );
	  
	  	# Widget Label2 isa Label
	$l->Label(
	   -takefocus => 0,
	   -text      => 'Category',
	  )->grid(
	   -row    => 1,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget category isa Entry
	$catb = $l->BrowseEntry(
	   -exportselection => 1,
	   -textvariable    => \$editshow{category},
	  )->grid(
	   -row    => 1,
	   -column => 1,
	   -sticky => 'w',
	  );
	  
	# Widget Label3 isa Label
	$l->Label(
	   -text => 'Path',
	  )->grid(
	   -row    => 2,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget path isa Entry
	$l->Entry(
	   -exportselection => 1,
	   -textvariable    => \$editshow{path},
	  )->grid(
	   -row    => 2,
	   -columnspan => 2,
	   -column => 1,
	   -sticky => 'ew',
	  );
	  
	# Widget Label4 isa Label
	$l->Label(
	   -takefocus => 0,
	   -text      => 'Pattern',
	  )->grid(
	   -row    => 3,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget pattern isa Entry
	$l->Entry(
	   -exportselection => 1,
	   -textvariable    => \$editshow{pattern},
	  )->grid(
	   -row    => 3,
	   -columnspan => 2,
	   -column => 1,
	   -sticky => 'ew',
	  );
	  
	# Widget Label5 isa Label
	$l->Label(
	   -takefocus => 0,
	   -text      => 'List Depth',
	  )->grid(
	   -row    => 4,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget listdepth isa Entry
	$l->Entry(
	   -textvariable =>  \$editshow{depth},
	  )->grid(
	   -row    => 4,
	   -column => 1,
	   -columnspan => 2,
	   -sticky => 'ew',
	  );
	  
	# Widget Label6 isa Label
	$l->Label(
	   -takefocus => 0,
	   -text      => 'Default Mode',
	  )->grid(
	   -row    => 5,
	   -column => 0,
	   -sticky => 'w',
	  );
	# Widget defmode isa Entry
	$l->Entry(
	   -exportselection => 1,
	   -textvariable    => \$editshow{defaultmode},
	  )->grid(
	   -row    => 5,
	   -column => 1,
	   -columnspan => 2,
	   -sticky => 'ew',
	  );

 		
   	my $buttons = $d->add("Frame")->grid(
		-row    => 1,	
  		-columnspan => 2,
		-sticky => 'nsew',
		);
   		
   		   
	$buttons ->Button(-text=>"Add Show", -command =>[\&addshow, $editList])->pack(
		-side=>"left",-expand=>1
		);
   	$buttons ->Button(-text=>"Delete Show", -command =>[\&delshow,\%editshow,$editList])->pack(
		-side=>"left",-expand=>1
		);
	$buttons ->Button(-text=>"Save Show", -command =>sub {saveShow(%editshow);loadShowList($editList);})->pack(
		-side=>"left",-expand=>1
		);
	
}

sub addshow {
	my $newDir = $MW->chooseDirectory();
	my %newShow;
	#boot strap name = folder name
	$newShow{name}= fileName($newDir);
	$newShow{path}= $newDir;
	addShow(%newShow);
	loadShowList(shift);
}


sub delshow {	
	my ($show,$list) = @_;
	return unless ($show->{id});	
	deleteShow($show->{id});
	say "Deleting Show #$show->{id} : $show->{name}";
	loadShowList($list);
	$show->{$_}="" foreach keys %{$show};
}


